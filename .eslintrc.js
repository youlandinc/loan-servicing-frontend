module.exports = {
  parser: '@typescript-eslint/parser',
  plugins: ['@typescript-eslint', 'react-hooks'],
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react-hooks/recommended',
    'plugin:@typescript-eslint/eslint-recommended',
    'plugin:@typescript-eslint/recommended',
    'next/core-web-vitals',
    'prettier',
  ],
  ignorePatterns: [
    '**/node_modules/*',
    '**/out/*',
    '**/.next/*',
    '**/public/*',
  ],
  rules: {
    // 测试用的
    // 'no-undef': ['error'],
    // 'import/prefer-default-export': ['error'],
    // Possible errors
    'no-console': 'warn',
    // Unused variables and imports
    'no-unused-vars': 'off',
    '@typescript-eslint/no-unused-vars': [
      'error',
      { argsIgnorePattern: '^_', varsIgnorePattern: '^_' },
    ],
    // Best practices
    'dot-notation': 'error',
    'no-else-return': 'error',
    'no-floating-decimal': 'error',
    'no-sequences': 'error',
    // Stylistic
    'array-bracket-spacing': 'error',
    'computed-property-spacing': ['error', 'never'],
    curly: 'error',
    'no-lonely-if': 'error',
    'no-unneeded-ternary': 'error',
    'one-var-declaration-per-line': 'error',
    quotes: [
      'error',
      'single',
      {
        allowTemplateLiterals: false,
        avoidEscape: true,
      },
    ],
    // ES6
    'array-callback-return': 'off',
    'prefer-const': 'error',
    // Imports
    'import/prefer-default-export': 'off',
    'sort-imports': [
      'error',
      {
        ignoreCase: true,
        ignoreDeclarationSort: true,
      },
    ],
    'no-unused-expressions': 'off',
    'no-prototype-builtins': 'off',
    // REACT
    'react/jsx-uses-react': 'off',
    'react/react-in-jsx-scope': 'off',
    'jsx-a11y/href-no-hash': [0],
    'react/display-name': 0,
    'react/no-deprecated': 'error',
    'react/no-unsafe': [
      'error',
      {
        checkAliases: true,
      },
    ],
    'react/jsx-sort-props': [
      'error',
      {
        ignoreCase: true,
      },
    ],
    'react-hooks/rules-of-hooks': 'error',
    'react-hooks/exhaustive-deps': 1,
    'no-void': 'off',
    '@typescript-eslint/no-explicit-any': 'off',
    '@typescript-eslint/no-non-null-assertion': 'off',

    'react/no-multi-comp': ['error', { ignoreStateless: true }],
    'react/forbid-prop-types': [
      'error',
      {
        forbid: ['any', 'array', 'object'],
        checkContextTypes: true,
        checkChildContextTypes: true,
      },
    ],
    'react/prefer-es6-class': ['error', 'always'],
    'no-useless-constructor': 'error',
    'react/prefer-stateless-function': [
      'error',
      { ignorePureComponents: true },
    ],
    'react/jsx-filename-extension': ['error', { extensions: ['.tsx'] }],
    'react/jsx-pascal-case': [
      'error',
      {
        allowAllCaps: false,
        allowNamespace: true,
        ignore: ['MRT_TableContainer', 'MRT_ExpandButton'],
      },
    ],
    'react/jsx-closing-bracket-location': ['error', 'line-aligned'],
    'react/jsx-closing-tag-location': ['error', 'line-aligned'],
    'jsx-quotes': ['error', 'prefer-double'],
    'no-multi-spaces': 'error',
    'react/jsx-tag-spacing': [
      'error',
      {
        closingSlash: 'never',
        beforeSelfClosing: 'always',
        afterOpening: 'never',
        beforeClosing: 'proportional-always',
      },
    ],
    'react/jsx-curly-spacing': [
      'error',
      {
        when: 'never',
        children: true,
      },
    ],
    'react/jsx-boolean-value': ['error', 'never'],
    'jsx-a11y/alt-text': [
      'error',
      {
        elements: ['img'],
        img: ['Image'],
      },
    ],
    'jsx-a11y/img-redundant-alt': ['error'],
    'jsx-a11y/no-access-key': ['error'],
    'react/no-string-refs': ['error', { noTemplateLiterals: true }],
    'react/jsx-wrap-multilines': [
      'error',
      {
        declaration: 'parens-new-line',
        assignment: 'parens-new-line',
        return: 'parens-new-line',
        arrow: 'parens-new-line',
        condition: 'parens-new-line',
        logical: 'parens-new-line',
      },
    ],
    'react/self-closing-comp': ['error'],
    'react/jsx-no-bind': [
      'error',
      { allowArrowFunctions: true, allowFunctions: true, allowBind: true },
    ],
    'react/require-render-return': ['error'],
    'react/sort-comp': ['error'],
    'react/no-is-mounted': ['error'],
    // js
    'prefer-const': ['error', { destructuring: 'all' }],
    'no-const-assign': ['error'],
    'no-var': ['error'],
    'no-new-object': ['error'],
    'object-shorthand': ['error', 'always'],
    'object-shorthand': ['error', 'methods'],
    'quote-props': ['error', 'as-needed'],
    'no-prototype-builtins': ['error'],
    'prefer-object-spread': ['error'],
    'no-array-constructor': ['error'],
    'array-callback-return': ['error'],
    'prefer-destructuring': ['error', { array: false, object: true }],
    'prefer-template': ['error'],
    'no-eval': ['error'],
    'no-useless-escape': ['error'],
    'func-style': ['error', 'expression'],
    'func-names': ['error', 'as-needed'],
    'no-loop-func': ['error'],
    'prefer-rest-params': ['error'],
    'no-new-func': ['error'],
    'no-param-reassign': ['error'],
    'prefer-spread': ['error'],
    'prefer-arrow-callback': ['error'],
    'no-useless-constructor': ['error'],
    'no-dupe-class-members': ['error'],
    'class-methods-use-this': ['error'],
    'no-duplicate-imports': ['error', { includeExports: true }],
    'import/no-mutable-exports': ['error'],
    'import/first': ['error'],
    'import/no-webpack-loader-syntax': ['error'],
    'no-iterator': ['error'],
    'no-restricted-syntax': ['error', 'WithStatement'],
    'dot-notation': ['error'],
    'prefer-exponentiation-operator': ['error'],
    'prefer-const': ['error', { destructuring: 'all' }],
    'no-multi-assign': ['error'],
    eqeqeq: ['error', 'always'],
    'no-case-declarations': ['error'],
    'no-unneeded-ternary': ['error'],
    'spaced-comment': ['error', 'always'],
    'no-new-wrappers': ['error'],
    'no-restricted-globals': ['error', 'isNaN', 'isFinite'],
  },
  settings: {
    react: {
      version: 'detect',
    },
  },
  env: {
    es6: true,
    browser: true,
    node: true,
  },
};
